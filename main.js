"use strict";const a=require("obsidian"),o="vault-block-manager";class l extends a.ItemView{constructor(e,t,n){super(e),this.blocks=[],this.draggedElement=null,this.draggedFile=null,this.plugin=n,this.settings=t,this.currentFolder=this.app.vault.getRoot()}getViewType(){return o}getDisplayText(){return"Block Manager"}async onOpen(){const e=this.containerEl.children[1];e.empty(),e.addClass("block-manager-container"),this.navigationContainer=e.createEl("div",{cls:"block-manager-nav"}),this.blockContainer=e.createEl("div",{cls:"block-manager-grid"}),this.setupNavigation(),this.renderBlocks(),this.applyCustomStyles()}async onClose(){this.blocks=[],this.draggedElement=null,this.draggedFile=null}setupNavigation(){this.navigationContainer.empty();const e=this.navigationContainer.createEl("button",{cls:"block-manager-nav-btn",text:"← Back"});e.addEventListener("click",()=>{this.currentFolder.parent&&(this.currentFolder=this.currentFolder.parent,this.renderBlocks(),this.setupNavigation())}),this.currentFolder.parent||(e.disabled=!0),this.navigationContainer.createEl("span",{cls:"block-manager-path",text:this.currentFolder.path||"/"})}renderBlocks(){this.blockContainer.empty(),this.blocks=[],this.currentFolder.children.filter(n=>n instanceof a.TFolder||n instanceof a.TFile&&n.extension==="md").sort((n,s)=>n instanceof a.TFolder&&s instanceof a.TFile?-1:n instanceof a.TFile&&s instanceof a.TFolder?1:this.settings.sortBy==="date"?s.stat.mtime-n.stat.mtime:n.name.localeCompare(s.name)).forEach(n=>{const s=this.createBlock(n);this.blockContainer.appendChild(s),this.blocks.push({file:n,element:s})})}createBlock(e){const t=this.blockContainer.createEl("div",{cls:e instanceof a.TFolder?"file-block folder-block":"file-block file-block-item"}),n=t.createEl("div",{cls:"block-name"});let s=e.name;return e instanceof a.TFile&&!this.settings.showFileExtensions&&(s=e.basename),n.textContent=s,this.setupBlockEvents(t,e),t}setupBlockEvents(e,t){e.draggable=!0,e.addEventListener("click",n=>{t instanceof a.TFolder?(this.currentFolder=t,this.renderBlocks(),this.setupNavigation()):this.app.workspace.openLinkText(t.path,"",!1)}),e.addEventListener("contextmenu",n=>{n.preventDefault(),this.showContextMenu(n,t)}),e.addEventListener("dragstart",n=>{this.draggedElement=e,this.draggedFile=t,e.addClass("dragging")}),e.addEventListener("dragend",()=>{e.removeClass("dragging"),this.draggedElement=null,this.draggedFile=null}),e.addEventListener("dragover",n=>{t instanceof a.TFolder&&this.draggedFile&&this.draggedFile!==t&&(n.preventDefault(),e.addClass("drop-target"))}),e.addEventListener("dragleave",()=>{e.removeClass("drop-target")}),e.addEventListener("drop",async n=>{if(n.preventDefault(),e.removeClass("drop-target"),t instanceof a.TFolder&&this.draggedFile&&this.draggedFile!==t){const s=t.path+"/"+this.draggedFile.name;try{await this.app.vault.rename(this.draggedFile,s),this.renderBlocks()}catch(i){console.error("Failed to move file:",i)}}})}showContextMenu(e,t){const n=new a.Menu;n.addItem(s=>{s.setTitle("Open").setIcon("file").onClick(()=>{t instanceof a.TFile?this.app.workspace.openLinkText(t.path,"",!1):(this.currentFolder=t,this.renderBlocks(),this.setupNavigation())})}),n.addItem(s=>{s.setTitle("Rename").setIcon("pencil").onClick(()=>{this.renameFile(t)})}),n.addItem(s=>{s.setTitle("Delete").setIcon("trash").onClick(async()=>{if(confirm(`Are you sure you want to delete "${t.name}"?`))try{await this.app.vault.delete(t),this.renderBlocks()}catch(i){console.error("Failed to delete file:",i)}})}),n.addItem(s=>{s.setTitle("Reveal in file explorer").setIcon("folder").onClick(()=>{this.app.showInFolder(t.path)})}),n.showAtMouseEvent(e)}async renameFile(e){var n;const t=prompt("Enter new name:",e.name);if(t&&t!==e.name){const s=(n=e.parent)!=null&&n.path?`${e.parent.path}/${t}`:t;try{await this.app.vault.rename(e,s),this.renderBlocks()}catch(i){console.error("Failed to rename file:",i)}}}applyCustomStyles(){const e=document.getElementById("block-manager-custom-styles")||document.createElement("style");e.id="block-manager-custom-styles";const t=this.settings.fontSize,n=this.settings.textColor;e.textContent=`
            .block-name {
                font-size: ${t}px !important;
                ${n?`color: ${n} !important;`:""}
            }
        `,document.getElementById("block-manager-custom-styles")||document.head.appendChild(e)}}const c={blockSize:120,showFileExtensions:!0,sortBy:"name",gridGap:16,fontSize:13,textColor:""};class d extends a.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){const{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Block Manager Settings"}),new a.Setting(e).setName("Font size").setDesc("Size of text in blocks").addSlider(t=>t.setLimits(10,18,1).setValue(this.plugin.settings.fontSize).onChange(async n=>{this.plugin.settings.fontSize=n,await this.plugin.saveSettings(),this.updateBlockStyles()})),new a.Setting(e).setName("Text color").setDesc("Custom color for block text (leave empty for theme default)").addText(t=>t.setPlaceholder("#000000").setValue(this.plugin.settings.textColor).onChange(async n=>{this.plugin.settings.textColor=n,await this.plugin.saveSettings(),this.updateBlockStyles()}))}updateBlockStyles(){const e=document.getElementById("block-manager-custom-styles")||document.createElement("style");e.id="block-manager-custom-styles";const t=this.plugin.settings.fontSize,n=this.plugin.settings.textColor;e.textContent=`
            .block-name {
                font-size: ${t}px !important;
                ${n?`color: ${n} !important;`:""}
            }
        `,document.getElementById("block-manager-custom-styles")||document.head.appendChild(e)}}class h extends a.Plugin{constructor(e,t){super(e,t)}async onload(){console.log("Vault Canvas Plugin loaded"),await this.loadSettings(),this.registerView(o,e=>new l(e,this.settings,this)),this.addRibbonIcon("layout","Open Block Manager",e=>{this.activateView()}),this.addCommand({id:"open-vault-canvas",name:"Open Block Manager View",callback:()=>this.activateView()}),this.addSettingTab(new d(this.app,this))}onunload(){console.log("Vault Canvas Plugin unloaded"),this.app.workspace.detachLeavesOfType(o)}async activateView(){const{workspace:e}=this.app;let t=e.getLeavesOfType(o)[0];t||(t=e.getRightLeaf(!1),t&&await t.setViewState({type:o,active:!0})),e.revealLeaf(t)}async loadSettings(){this.settings=Object.assign({},c,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}}module.exports=h;
